<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.1.0">
  <zoom_level>5</zoom_level>
  <element>
    <id>UMLSequenceAllInOne</id>
    <coordinates>
      <x>0</x>
      <y>0</y>
      <w>2490</w>
      <h>2665</h>
    </coordinates>
    <panel_attributes>title= GPW
obj=SimulationService~SS
obj=ClientService~CS
obj=StrategyFactory~SF
obj=Strategy~S
obj=BankStrategyAdapterService~BaSAS
obj=BankService~BaS
obj=BrokerStrategyAdapterService~BSAS
obj=BankBrookerAdapterService~BBAS
obj=BrokerService~BS
obj=StockQuotationRepository ~SQR
obj=StockRepository~SR
obj=TransactionRepository~ TR
obj= ClientRepository~CR
obj=AccountRepository~AR
obj=CurrencyRepository~CuR
obj=DailySupervisorService~DSS
obj=DailyCounter~ DC
on=SS;

SS-&gt;SQR: findStartDay(); on=SQR;
SQR.&gt;SS: Date; off=SQR
SS-&gt;DSS: setStartDay(); on=DSS;
DSS-&gt; DC: setStartDay(Date); on=DC
off=DC;off=DSS;

combinedFragment=execute()~ml;

SS-&gt;BaS: generateNewCurrentRating(); on=BaS;
BaS-&gt;DSS: getCurrentDate(); DSS-&gt;DC:getCurrentDate (); on=DSS; on=DC
DC.&gt;DSS: Date; DSS.&gt;BaS: Date; off=DC; off=DSS;
combinedFragment=BankGenLoop~BGL BaS CuR;
BaS-&gt;CuR: setCurrencyRate(Date,String, Money); off=BaS;
--

SS-&gt;CS: findAll();CS-&gt;CR: findAll(); on=CS; on=CR
CR.&gt;CS: List&lt;ClientEntity&gt;;CS.&gt;SS:List&lt;ClientTo&gt;;off=CS; off=CR

combinedFragment=ClientsLoop~cl SS DC;

SS-&gt;CS: executeStrategy(ClientTo); on=CS
CS-&gt;SF:getStrategy(Integer, Long); on=SF
SF.&gt;CS; off=SF
CS-&gt;S:execute(); on=S;

S-&gt;BaSAS: getAccount(Long); on=BaSAS
BaSAS-&gt;BaS: getAccount(Long); on=BaS
BaS-&gt;AR: getAccount(Long); on=AR
AR.&gt;BaS: AccountEntity; off=AR
BaS.&gt;BaSAS: AccountTo; 
BaSAS.&gt;S: AccountTo; 

S-&gt;BaSAS: getCurrencExchangeRate(String, String);
BaSAS-&gt;BaS: getCurrencExchangeRate(String, String);
BaS-&gt;DSS: getCurrentDate(); DSS-&gt;DC:getCurrentDate (); on=DSS; on=DC
DC.&gt;DSS: Date; DSS.&gt;BaS: Date; off=DC; off=DSS;
BaS-&gt;CuR: getCurrencyRate(Date, String):; on=CuR
CuR.&gt;BaS: Money;
BaS-&gt;CuR: getCurrencyRate(Date, String); 
CuR.&gt;BaS: Money; off=CuR;
BaS.&gt;BaSAS: Money; off=BaS;
BaSAS.&gt;S: Money; off= BaSAS;

S-&gt;BSAS: getAllClientStocks(Long); on=BSAS
BSAS-&gt;BS: getAllClientStocks(Long); on=BS
BS-&gt;SR: getStocks(Long); on=SR
SR.&gt;BS: List&lt;StockEntity&gt;; off=SR
BS.&gt;BSAS: List&lt;StockTo&gt;; 
BSAS.&gt;S:  List&lt;StockTo&gt;; 

S-&gt;BSAS: getTodayStockQuotation();
BSAS-&gt;BS: getTodayStockQuotation();
BS-&gt;DSS: getCurrentDate(); DSS-&gt;DC:getCurrentDate (); on=DSS; on=DC
DC.&gt;DSS: Date; DSS.&gt;BS: Date; off=DC; off=DSS;
BS-&gt;SQR: getTodayStockQuotation(Date); on=SQR
SQR.&gt;BS: List&lt;StockQuotationEntity&gt;; off=SQR
BS.&gt;BSAS: List&lt;StockQuotationTo&gt;; 
BSAS.&gt;S:  List&lt;StockQuotationTo&gt;; 

S-&gt;BSAS: getStockQuotationFrom(Date);
BSAS-&gt;BS: getStockQuotationFrom(Date);
BS-&gt;DSS: getCurrentDate(); DSS-&gt;DC:getCurrentDate (); on=DSS; on=DC
DC.&gt;DSS: Date; DSS.&gt;BS: Date; off=DC; off=DSS;
BS-&gt;SQR: getStockQuotationFrom(Date); on=SQR
SQR.&gt;BS: List&lt;StockQuotationEntity&gt;; off=SQR
BS.&gt;BSAS: List&lt;StockQuotationTo&gt;; 
BSAS.&gt;S:  List&lt;StockQuotationTo&gt;; 

S-&gt;BSAS: calculateFees(List&lt;TransactionTo&gt;);
BSAS-&gt;BS: calculateFees(List&lt;TransactionTo&gt;);
BS.&gt;BSAS: Money; 
BSAS.&gt;S:  Money;

S-&gt;BSAS: prepareOffer(List&lt;TransactionTo&gt;);
BSAS-&gt;BS: prepareOffer(List&lt;TransactionTo&gt;);
BS-&gt;TR: addTransactions(List&lt;TransactionEntity&gt;);
BS.&gt;BSAS: List&lt;TransactionTo&gt;; off=BS;
BSAS.&gt;S:  List&lt;TransactionTo&gt;;off=BSAS; 


S-&gt;BaSAS: exchange(Long, String, String, Money); on=BaSAS;
BaSAS-&gt;BaS: exchange(Long, String, String, Money); on= BaS;
BaS-&gt;DSS: getCurrentDate(); DSS-&gt;DC:getCurrentDate (); on=DSS; on=DC
DC.&gt;DSS: Date; DSS.&gt;BaS: Date; off=DC; off=DSS; 
BaS-&gt;CuR: getCurrencyRate(Date,String):; on=CuR
CuR.&gt;BaS: Money;
BaS-&gt;CuR: getCurrencyRate(Date,String); 
CuR.&gt;BaS: Money; off=CuR;
BaS-&gt;AR: getAccount(Long); on=AR
AR.&gt;BaS: AccountEntity; 
BaS-&gt;AR: updateBudget(List&lt;CurrencyEntity&gt;); 
BaS-&gt;AR: getAccount(Long); 
AR.&gt;BaS: AccountEntity; off=AR;
BaS.&gt;BaSAS: AccountTo; 
BaSAS.&gt;S: AccountTo; 

S-&gt;BaSAS: payForTransaction(Long); 
BaSAS-&gt;BaS: payForTransaction(Long);
BaS-&gt;AR: getAccount(Long); on=AR;
AR.&gt;BaS: AccountEntity; 
BaS-&gt;AR: addPayment(Long, Payment); 
BaS-&gt;AR: updateBudget(Long, List&lt;CurrencyEntity&gt;); 
AR.&gt;BaS: Boolean; off=AR;
BaS.&gt;BaSAS: Boolean; 
BaSAS.&gt;S: Boolean; 

on=BSAS; S-&gt;BSAS: responseOffer(Long,Boolean);  on= BS
BSAS-&gt;BS: responseOffer(Long,Boolean); off=BSAS; 
on=BBAS;BS-&gt;BBAS: getTodayPayment(Long);BBAS-&gt;BaS: getPayment(Long);
BaS-&gt;DSS: getCurrentDate(); DSS-&gt;DC:getCurrentDate (); on=DSS; on=DC
DC.&gt;DSS: Date; DSS.&gt;BaS: Date; off=DC; off=DSS;
BaS.&gt;BBAS: PaymentTo; BBAS.&gt;BS:PaymentTo;
BS-&gt;TR: updateTransactionsStatus(List&lt;TransactionEntity&gt;)
BS-&gt;SR: addStocksClient(List&lt;StockEntity&gt;);
BS-&gt;SR: deleteStocksClient(List&lt;StockEntity&gt;);
BS-&gt; BBAS: payForTransaction(Long, PaymentTo);BBAS-&gt;BaS: payForTransaction(Long, PaymentTo);
BaS-&gt;AR: addPayment(Long, PaymentEntity);  on=AR;
BaS-&gt;AR: updateBudget(Long, List&lt;CurrencyEntity&gt;); 
AR.&gt;BaS: Boolean; off=AR;
BaS.&gt;BBAS: Boolean; BBAS.&gt; BS: Boolean; off=BBAS
BS.&gt;S; off=BS;

S-&gt;BaSAS: getAccount(Long); 
BaSAS-&gt;BaS: getAccount(Long); 
BaS-&gt;AR: getAccount(Long); on=AR
AR.&gt;BaS: AccountEntity; off=AR
BaS.&gt;BaSAS: AccountTo; 
BaSAS.&gt;S: AccountTo; 

S-&gt;BaSAS: exchange(Long, String, String, Money); 
BaSAS-&gt;BaS: exchange(Long, String, String, Money); 
BaS-&gt;DSS: getCurrentDate(); DSS-&gt;DC:getCurrentDate (); on=DSS; on=DC
DC.&gt;DSS: Date; DSS.&gt;BaS: Date; off=DC; off=DSS;
BaS-&gt;CuR: getCurrencyRate(Date,String):; on=CuR
CuR.&gt;BaS: Money;
BaS-&gt;CuR: getCurrencyRate(Date, String); 
CuR.&gt;BaS: Money; off=CuR;
BaS-&gt;AR: getAccount(Long); on=AR
AR.&gt;BaS: AccountEntity; 
BaS-&gt;AR: updateBudget(List&lt;CurrencyEntity&gt;); 
BaS-&gt;AR: getAccount(Long); 
AR.&gt;BaS: AccountEntity; off=AR;
BaS.&gt;BaSAS: AccountTo; off=BaS; 
BaSAS.&gt;S: AccountTo; off= BaSAS;
S.&gt;CS;off=S;
--
CS.&gt;SS; off=CS;
SS-&gt;DC: nextDay();
--

</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
